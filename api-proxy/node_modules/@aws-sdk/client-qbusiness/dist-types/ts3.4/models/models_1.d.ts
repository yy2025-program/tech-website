import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import {
  ActionExecution,
  ActionExecutionEvent,
  ActionReview,
  ActionSummary,
  Attachment,
  AttachmentInput,
  AttachmentInputEvent,
  AttachmentOutput,
  AuthChallengeResponse,
  AuthChallengeResponseEvent,
  BlockedPhrasesConfigurationUpdate,
  ChatMode,
  ChatModeConfiguration,
  ChatResponseConfiguration,
  ChatResponseConfigurationDetail,
  ContentSource,
  Conversation,
  CreatorModeConfiguration,
  DataAccessorAuthenticationDetail,
  DataSourceSyncJob,
  DataSourceSyncJobStatus,
  DocumentAttribute,
  DocumentDetails,
  EndOfInputEvent,
  ErrorDetail,
  HallucinationReductionConfiguration,
  MembershipType,
  OrchestrationControl,
  PluginType,
  ResponseConfiguration,
  ResponseConfigurationType,
  ResponseScope,
  S3,
  SourceAttribution,
  SubscriptionDetails,
  SubscriptionPrincipal,
  SubscriptionType,
  Tag,
  TextInputEvent,
  TopicConfiguration,
  UserAlias,
} from "./models_0";
import { QBusinessServiceException as __BaseException } from "./QBusinessServiceException";
export interface GetChatResponseConfigurationRequest {
  applicationId: string | undefined;
  chatResponseConfigurationId: string | undefined;
}
export interface GetChatResponseConfigurationResponse {
  chatResponseConfigurationId?: string | undefined;
  chatResponseConfigurationArn?: string | undefined;
  displayName?: string | undefined;
  createdAt?: Date | undefined;
  inUseConfiguration?: ChatResponseConfigurationDetail | undefined;
  lastUpdateConfiguration?: ChatResponseConfigurationDetail | undefined;
}
export interface GetGroupRequest {
  applicationId: string | undefined;
  indexId: string | undefined;
  groupName: string | undefined;
  dataSourceId?: string | undefined;
}
export declare const GroupStatus: {
  readonly DELETED: "DELETED";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly PROCESSING: "PROCESSING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type GroupStatus = (typeof GroupStatus)[keyof typeof GroupStatus];
export interface GroupStatusDetail {
  status?: GroupStatus | undefined;
  lastUpdatedAt?: Date | undefined;
  errorDetail?: ErrorDetail | undefined;
}
export interface GetGroupResponse {
  status?: GroupStatusDetail | undefined;
  statusHistory?: GroupStatusDetail[] | undefined;
}
export interface GetMediaRequest {
  applicationId: string | undefined;
  conversationId: string | undefined;
  messageId: string | undefined;
  mediaId: string | undefined;
}
export interface GetMediaResponse {
  mediaBytes?: Uint8Array | undefined;
  mediaMimeType?: string | undefined;
}
export declare class MediaTooLargeException extends __BaseException {
  readonly name: "MediaTooLargeException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<MediaTooLargeException, __BaseException>
  );
}
export interface GetPolicyRequest {
  applicationId: string | undefined;
}
export interface GetPolicyResponse {
  policy?: string | undefined;
}
export interface GetUserRequest {
  applicationId: string | undefined;
  userId: string | undefined;
}
export interface GetUserResponse {
  userAliases?: UserAlias[] | undefined;
}
export interface ListAttachmentsRequest {
  applicationId: string | undefined;
  conversationId?: string | undefined;
  userId?: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface ListAttachmentsResponse {
  attachments?: Attachment[] | undefined;
  nextToken?: string | undefined;
}
export interface ListChatResponseConfigurationsRequest {
  applicationId: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface ListChatResponseConfigurationsResponse {
  chatResponseConfigurations?: ChatResponseConfiguration[] | undefined;
  nextToken?: string | undefined;
}
export interface ListConversationsRequest {
  applicationId: string | undefined;
  userId?: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface ListConversationsResponse {
  nextToken?: string | undefined;
  conversations?: Conversation[] | undefined;
}
export interface ListDataSourceSyncJobsRequest {
  dataSourceId: string | undefined;
  applicationId: string | undefined;
  indexId: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
  statusFilter?: DataSourceSyncJobStatus | undefined;
}
export interface ListDataSourceSyncJobsResponse {
  history?: DataSourceSyncJob[] | undefined;
  nextToken?: string | undefined;
}
export interface ListDocumentsRequest {
  applicationId: string | undefined;
  indexId: string | undefined;
  dataSourceIds?: string[] | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface ListDocumentsResponse {
  documentDetailList?: DocumentDetails[] | undefined;
  nextToken?: string | undefined;
}
export interface ListGroupsRequest {
  applicationId: string | undefined;
  indexId: string | undefined;
  updatedEarlierThan: Date | undefined;
  dataSourceId?: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface GroupSummary {
  groupName?: string | undefined;
}
export interface ListGroupsResponse {
  nextToken?: string | undefined;
  items?: GroupSummary[] | undefined;
}
export interface ListMessagesRequest {
  conversationId: string | undefined;
  applicationId: string | undefined;
  userId?: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export declare const MessageType: {
  readonly SYSTEM: "SYSTEM";
  readonly USER: "USER";
};
export type MessageType = (typeof MessageType)[keyof typeof MessageType];
export interface Message {
  messageId?: string | undefined;
  body?: string | undefined;
  time?: Date | undefined;
  type?: MessageType | undefined;
  attachments?: AttachmentOutput[] | undefined;
  sourceAttribution?: SourceAttribution[] | undefined;
  actionReview?: ActionReview | undefined;
  actionExecution?: ActionExecution | undefined;
}
export interface ListMessagesResponse {
  messages?: Message[] | undefined;
  nextToken?: string | undefined;
}
export interface ListPluginActionsRequest {
  applicationId: string | undefined;
  pluginId: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface ListPluginActionsResponse {
  nextToken?: string | undefined;
  items?: ActionSummary[] | undefined;
}
export interface ListPluginTypeActionsRequest {
  pluginType: PluginType | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface ListPluginTypeActionsResponse {
  nextToken?: string | undefined;
  items?: ActionSummary[] | undefined;
}
export interface ListPluginTypeMetadataRequest {
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export declare const PluginTypeCategory: {
  readonly COMMUNICATION: "Communication";
  readonly CRM: "Customer relationship management (CRM)";
  readonly PRODUCTIVITY: "Productivity";
  readonly PROJECT_MANAGEMENT: "Project management";
  readonly TICKETING_MANAGEMENT: "Ticketing and incident management";
};
export type PluginTypeCategory =
  (typeof PluginTypeCategory)[keyof typeof PluginTypeCategory];
export interface PluginTypeMetadataSummary {
  type?: PluginType | undefined;
  category?: PluginTypeCategory | undefined;
  description?: string | undefined;
}
export interface ListPluginTypeMetadataResponse {
  nextToken?: string | undefined;
  items?: PluginTypeMetadataSummary[] | undefined;
}
export interface ListSubscriptionsRequest {
  applicationId: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface Subscription {
  subscriptionId?: string | undefined;
  subscriptionArn?: string | undefined;
  principal?: SubscriptionPrincipal | undefined;
  currentSubscription?: SubscriptionDetails | undefined;
  nextSubscription?: SubscriptionDetails | undefined;
}
export interface ListSubscriptionsResponse {
  nextToken?: string | undefined;
  subscriptions?: Subscription[] | undefined;
}
export interface ListTagsForResourceRequest {
  resourceARN: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Tag[] | undefined;
}
export declare const MessageUsefulnessReason: {
  readonly COMPLETE: "COMPLETE";
  readonly FACTUALLY_CORRECT: "FACTUALLY_CORRECT";
  readonly HARMFUL_OR_UNSAFE: "HARMFUL_OR_UNSAFE";
  readonly HELPFUL: "HELPFUL";
  readonly INCORRECT_OR_MISSING_SOURCES: "INCORRECT_OR_MISSING_SOURCES";
  readonly NOT_BASED_ON_DOCUMENTS: "NOT_BASED_ON_DOCUMENTS";
  readonly NOT_COMPLETE: "NOT_COMPLETE";
  readonly NOT_CONCISE: "NOT_CONCISE";
  readonly NOT_FACTUALLY_CORRECT: "NOT_FACTUALLY_CORRECT";
  readonly NOT_HELPFUL: "NOT_HELPFUL";
  readonly OTHER: "OTHER";
  readonly RELEVANT_SOURCES: "RELEVANT_SOURCES";
};
export type MessageUsefulnessReason =
  (typeof MessageUsefulnessReason)[keyof typeof MessageUsefulnessReason];
export declare const MessageUsefulness: {
  readonly NOT_USEFUL: "NOT_USEFUL";
  readonly USEFUL: "USEFUL";
};
export type MessageUsefulness =
  (typeof MessageUsefulness)[keyof typeof MessageUsefulness];
export interface MessageUsefulnessFeedback {
  usefulness: MessageUsefulness | undefined;
  reason?: MessageUsefulnessReason | undefined;
  comment?: string | undefined;
  submittedAt: Date | undefined;
}
export interface PutFeedbackRequest {
  applicationId: string | undefined;
  userId?: string | undefined;
  conversationId: string | undefined;
  messageId: string | undefined;
  messageCopiedAt?: Date | undefined;
  messageUsefulness?: MessageUsefulnessFeedback | undefined;
}
export interface MemberGroup {
  groupName: string | undefined;
  type?: MembershipType | undefined;
}
export interface MemberUser {
  userId: string | undefined;
  type?: MembershipType | undefined;
}
export interface GroupMembers {
  memberGroups?: MemberGroup[] | undefined;
  memberUsers?: MemberUser[] | undefined;
  s3PathForGroupMembers?: S3 | undefined;
}
export interface PutGroupRequest {
  applicationId: string | undefined;
  indexId: string | undefined;
  groupName: string | undefined;
  dataSourceId?: string | undefined;
  type: MembershipType | undefined;
  groupMembers: GroupMembers | undefined;
  roleArn?: string | undefined;
}
export interface PutGroupResponse {}
export declare const ScoreConfidence: {
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
  readonly NOT_AVAILABLE: "NOT_AVAILABLE";
  readonly VERY_HIGH: "VERY_HIGH";
};
export type ScoreConfidence =
  (typeof ScoreConfidence)[keyof typeof ScoreConfidence];
export interface ScoreAttributes {
  scoreConfidence?: ScoreConfidence | undefined;
}
export interface RelevantContent {
  content?: string | undefined;
  documentId?: string | undefined;
  documentTitle?: string | undefined;
  documentUri?: string | undefined;
  documentAttributes?: DocumentAttribute[] | undefined;
  scoreAttributes?: ScoreAttributes | undefined;
}
export interface SearchRelevantContentResponse {
  relevantContent?: RelevantContent[] | undefined;
  nextToken?: string | undefined;
}
export interface StartDataSourceSyncJobRequest {
  dataSourceId: string | undefined;
  applicationId: string | undefined;
  indexId: string | undefined;
}
export interface StartDataSourceSyncJobResponse {
  executionId?: string | undefined;
}
export interface StopDataSourceSyncJobRequest {
  dataSourceId: string | undefined;
  applicationId: string | undefined;
  indexId: string | undefined;
}
export interface StopDataSourceSyncJobResponse {}
export interface TagResourceRequest {
  resourceARN: string | undefined;
  tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceARN: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface OrchestrationConfiguration {
  control: OrchestrationControl | undefined;
}
export interface UpdateChatControlsConfigurationRequest {
  applicationId: string | undefined;
  clientToken?: string | undefined;
  responseScope?: ResponseScope | undefined;
  orchestrationConfiguration?: OrchestrationConfiguration | undefined;
  blockedPhrasesConfigurationUpdate?:
    | BlockedPhrasesConfigurationUpdate
    | undefined;
  topicConfigurationsToCreateOrUpdate?: TopicConfiguration[] | undefined;
  topicConfigurationsToDelete?: TopicConfiguration[] | undefined;
  creatorModeConfiguration?: CreatorModeConfiguration | undefined;
  hallucinationReductionConfiguration?:
    | HallucinationReductionConfiguration
    | undefined;
}
export interface UpdateChatControlsConfigurationResponse {}
export interface UpdateChatResponseConfigurationRequest {
  applicationId: string | undefined;
  chatResponseConfigurationId: string | undefined;
  displayName?: string | undefined;
  responseConfigurations:
    | Partial<Record<ResponseConfigurationType, ResponseConfiguration>>
    | undefined;
  clientToken?: string | undefined;
}
export interface UpdateChatResponseConfigurationResponse {}
export interface UpdateSubscriptionRequest {
  applicationId: string | undefined;
  subscriptionId: string | undefined;
  type: SubscriptionType | undefined;
}
export interface UpdateSubscriptionResponse {
  subscriptionArn?: string | undefined;
  currentSubscription?: SubscriptionDetails | undefined;
  nextSubscription?: SubscriptionDetails | undefined;
}
export interface UpdateUserRequest {
  applicationId: string | undefined;
  userId: string | undefined;
  userAliasesToUpdate?: UserAlias[] | undefined;
  userAliasesToDelete?: UserAlias[] | undefined;
}
export interface UpdateUserResponse {
  userAliasesAdded?: UserAlias[] | undefined;
  userAliasesUpdated?: UserAlias[] | undefined;
  userAliasesDeleted?: UserAlias[] | undefined;
}
export interface AttributeFilter {
  andAllFilters?: AttributeFilter[] | undefined;
  orAllFilters?: AttributeFilter[] | undefined;
  notFilter?: AttributeFilter | undefined;
  equalsTo?: DocumentAttribute | undefined;
  containsAll?: DocumentAttribute | undefined;
  containsAny?: DocumentAttribute | undefined;
  greaterThan?: DocumentAttribute | undefined;
  greaterThanOrEquals?: DocumentAttribute | undefined;
  lessThan?: DocumentAttribute | undefined;
  lessThanOrEquals?: DocumentAttribute | undefined;
}
export interface ActionFilterConfiguration {
  documentAttributeFilter: AttributeFilter | undefined;
}
export interface ChatSyncInput {
  applicationId: string | undefined;
  userId?: string | undefined;
  userGroups?: string[] | undefined;
  userMessage?: string | undefined;
  attachments?: AttachmentInput[] | undefined;
  actionExecution?: ActionExecution | undefined;
  authChallengeResponse?: AuthChallengeResponse | undefined;
  conversationId?: string | undefined;
  parentMessageId?: string | undefined;
  attributeFilter?: AttributeFilter | undefined;
  chatMode?: ChatMode | undefined;
  chatModeConfiguration?: ChatModeConfiguration | undefined;
  clientToken?: string | undefined;
}
export interface ConfigurationEvent {
  chatMode?: ChatMode | undefined;
  chatModeConfiguration?: ChatModeConfiguration | undefined;
  attributeFilter?: AttributeFilter | undefined;
}
export interface SearchRelevantContentRequest {
  applicationId: string | undefined;
  queryText: string | undefined;
  contentSource: ContentSource | undefined;
  attributeFilter?: AttributeFilter | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface ActionConfiguration {
  action: string | undefined;
  filterConfiguration?: ActionFilterConfiguration | undefined;
}
export type ChatInputStream =
  | ChatInputStream.ActionExecutionEventMember
  | ChatInputStream.AttachmentEventMember
  | ChatInputStream.AuthChallengeResponseEventMember
  | ChatInputStream.ConfigurationEventMember
  | ChatInputStream.EndOfInputEventMember
  | ChatInputStream.TextEventMember
  | ChatInputStream.$UnknownMember;
export declare namespace ChatInputStream {
  interface ConfigurationEventMember {
    configurationEvent: ConfigurationEvent;
    textEvent?: never;
    attachmentEvent?: never;
    actionExecutionEvent?: never;
    endOfInputEvent?: never;
    authChallengeResponseEvent?: never;
    $unknown?: never;
  }
  interface TextEventMember {
    configurationEvent?: never;
    textEvent: TextInputEvent;
    attachmentEvent?: never;
    actionExecutionEvent?: never;
    endOfInputEvent?: never;
    authChallengeResponseEvent?: never;
    $unknown?: never;
  }
  interface AttachmentEventMember {
    configurationEvent?: never;
    textEvent?: never;
    attachmentEvent: AttachmentInputEvent;
    actionExecutionEvent?: never;
    endOfInputEvent?: never;
    authChallengeResponseEvent?: never;
    $unknown?: never;
  }
  interface ActionExecutionEventMember {
    configurationEvent?: never;
    textEvent?: never;
    attachmentEvent?: never;
    actionExecutionEvent: ActionExecutionEvent;
    endOfInputEvent?: never;
    authChallengeResponseEvent?: never;
    $unknown?: never;
  }
  interface EndOfInputEventMember {
    configurationEvent?: never;
    textEvent?: never;
    attachmentEvent?: never;
    actionExecutionEvent?: never;
    endOfInputEvent: EndOfInputEvent;
    authChallengeResponseEvent?: never;
    $unknown?: never;
  }
  interface AuthChallengeResponseEventMember {
    configurationEvent?: never;
    textEvent?: never;
    attachmentEvent?: never;
    actionExecutionEvent?: never;
    endOfInputEvent?: never;
    authChallengeResponseEvent: AuthChallengeResponseEvent;
    $unknown?: never;
  }
  interface $UnknownMember {
    configurationEvent?: never;
    textEvent?: never;
    attachmentEvent?: never;
    actionExecutionEvent?: never;
    endOfInputEvent?: never;
    authChallengeResponseEvent?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    configurationEvent: (value: ConfigurationEvent) => T;
    textEvent: (value: TextInputEvent) => T;
    attachmentEvent: (value: AttachmentInputEvent) => T;
    actionExecutionEvent: (value: ActionExecutionEvent) => T;
    endOfInputEvent: (value: EndOfInputEvent) => T;
    authChallengeResponseEvent: (value: AuthChallengeResponseEvent) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ChatInputStream, visitor: Visitor<T>) => T;
}
export interface ChatInput {
  applicationId: string | undefined;
  userId?: string | undefined;
  userGroups?: string[] | undefined;
  conversationId?: string | undefined;
  parentMessageId?: string | undefined;
  clientToken?: string | undefined;
  inputStream?: AsyncIterable<ChatInputStream> | undefined;
}
export interface CreateDataAccessorRequest {
  applicationId: string | undefined;
  principal: string | undefined;
  actionConfigurations: ActionConfiguration[] | undefined;
  clientToken?: string | undefined;
  displayName: string | undefined;
  authenticationDetail?: DataAccessorAuthenticationDetail | undefined;
  tags?: Tag[] | undefined;
}
export interface GetDataAccessorResponse {
  displayName?: string | undefined;
  dataAccessorId?: string | undefined;
  dataAccessorArn?: string | undefined;
  applicationId?: string | undefined;
  idcApplicationArn?: string | undefined;
  principal?: string | undefined;
  actionConfigurations?: ActionConfiguration[] | undefined;
  authenticationDetail?: DataAccessorAuthenticationDetail | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}
export interface UpdateDataAccessorRequest {
  applicationId: string | undefined;
  dataAccessorId: string | undefined;
  actionConfigurations: ActionConfiguration[] | undefined;
  authenticationDetail?: DataAccessorAuthenticationDetail | undefined;
  displayName?: string | undefined;
}
export declare const ChatInputStreamFilterSensitiveLog: (
  obj: ChatInputStream
) => any;
export declare const ChatInputFilterSensitiveLog: (obj: ChatInput) => any;
export declare const CreateDataAccessorRequestFilterSensitiveLog: (
  obj: CreateDataAccessorRequest
) => any;
export declare const GetDataAccessorResponseFilterSensitiveLog: (
  obj: GetDataAccessorResponse
) => any;
export declare const UpdateDataAccessorRequestFilterSensitiveLog: (
  obj: UpdateDataAccessorRequest
) => any;
