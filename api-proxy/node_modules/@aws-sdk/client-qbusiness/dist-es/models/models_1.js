import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { QBusinessServiceException as __BaseException } from "./QBusinessServiceException";
export const GroupStatus = {
    DELETED: "DELETED",
    DELETING: "DELETING",
    FAILED: "FAILED",
    PROCESSING: "PROCESSING",
    SUCCEEDED: "SUCCEEDED",
};
export class MediaTooLargeException extends __BaseException {
    name = "MediaTooLargeException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "MediaTooLargeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MediaTooLargeException.prototype);
    }
}
export const MessageType = {
    SYSTEM: "SYSTEM",
    USER: "USER",
};
export const PluginTypeCategory = {
    COMMUNICATION: "Communication",
    CRM: "Customer relationship management (CRM)",
    PRODUCTIVITY: "Productivity",
    PROJECT_MANAGEMENT: "Project management",
    TICKETING_MANAGEMENT: "Ticketing and incident management",
};
export const MessageUsefulnessReason = {
    COMPLETE: "COMPLETE",
    FACTUALLY_CORRECT: "FACTUALLY_CORRECT",
    HARMFUL_OR_UNSAFE: "HARMFUL_OR_UNSAFE",
    HELPFUL: "HELPFUL",
    INCORRECT_OR_MISSING_SOURCES: "INCORRECT_OR_MISSING_SOURCES",
    NOT_BASED_ON_DOCUMENTS: "NOT_BASED_ON_DOCUMENTS",
    NOT_COMPLETE: "NOT_COMPLETE",
    NOT_CONCISE: "NOT_CONCISE",
    NOT_FACTUALLY_CORRECT: "NOT_FACTUALLY_CORRECT",
    NOT_HELPFUL: "NOT_HELPFUL",
    OTHER: "OTHER",
    RELEVANT_SOURCES: "RELEVANT_SOURCES",
};
export const MessageUsefulness = {
    NOT_USEFUL: "NOT_USEFUL",
    USEFUL: "USEFUL",
};
export const ScoreConfidence = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
    NOT_AVAILABLE: "NOT_AVAILABLE",
    VERY_HIGH: "VERY_HIGH",
};
export var ChatInputStream;
(function (ChatInputStream) {
    ChatInputStream.visit = (value, visitor) => {
        if (value.configurationEvent !== undefined)
            return visitor.configurationEvent(value.configurationEvent);
        if (value.textEvent !== undefined)
            return visitor.textEvent(value.textEvent);
        if (value.attachmentEvent !== undefined)
            return visitor.attachmentEvent(value.attachmentEvent);
        if (value.actionExecutionEvent !== undefined)
            return visitor.actionExecutionEvent(value.actionExecutionEvent);
        if (value.endOfInputEvent !== undefined)
            return visitor.endOfInputEvent(value.endOfInputEvent);
        if (value.authChallengeResponseEvent !== undefined)
            return visitor.authChallengeResponseEvent(value.authChallengeResponseEvent);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ChatInputStream || (ChatInputStream = {}));
export const ChatInputStreamFilterSensitiveLog = (obj) => {
    if (obj.configurationEvent !== undefined)
        return { configurationEvent: obj.configurationEvent };
    if (obj.textEvent !== undefined)
        return { textEvent: obj.textEvent };
    if (obj.attachmentEvent !== undefined)
        return { attachmentEvent: obj.attachmentEvent };
    if (obj.actionExecutionEvent !== undefined)
        return { actionExecutionEvent: obj.actionExecutionEvent };
    if (obj.endOfInputEvent !== undefined)
        return { endOfInputEvent: obj.endOfInputEvent };
    if (obj.authChallengeResponseEvent !== undefined)
        return { authChallengeResponseEvent: obj.authChallengeResponseEvent };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const ChatInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.inputStream && { inputStream: "STREAMING_CONTENT" }),
});
export const CreateDataAccessorRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.actionConfigurations && { actionConfigurations: obj.actionConfigurations.map((item) => item) }),
    ...(obj.displayName && { displayName: SENSITIVE_STRING }),
    ...(obj.authenticationDetail && { authenticationDetail: obj.authenticationDetail }),
});
export const GetDataAccessorResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.displayName && { displayName: SENSITIVE_STRING }),
    ...(obj.actionConfigurations && { actionConfigurations: obj.actionConfigurations.map((item) => item) }),
    ...(obj.authenticationDetail && { authenticationDetail: obj.authenticationDetail }),
});
export const UpdateDataAccessorRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.actionConfigurations && { actionConfigurations: obj.actionConfigurations.map((item) => item) }),
    ...(obj.authenticationDetail && { authenticationDetail: obj.authenticationDetail }),
    ...(obj.displayName && { displayName: SENSITIVE_STRING }),
});
