import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, serializeDateTime as __serializeDateTime, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, ConflictException, DocumentAttributeValue, DocumentContent, ExternalResourceException, InternalServerException, LicenseNotFoundException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
import { ChatInputStream, MediaTooLargeException, } from "../models/models_1";
import { QBusinessServiceException as __BaseException } from "../models/QBusinessServiceException";
export const se_AssociatePermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/policy");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        actions: (_) => _json(_),
        conditions: (_) => _json(_),
        principal: [],
        statementId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchDeleteDocumentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/indices/{indexId}/documents/delete");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    let body;
    body = JSON.stringify(take(input, {
        dataSourceSyncId: [],
        documents: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchPutDocumentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/indices/{indexId}/documents");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    let body;
    body = JSON.stringify(take(input, {
        dataSourceSyncId: [],
        documents: (_) => se_Documents(_, context),
        roleArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CancelSubscriptionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/subscriptions/{subscriptionId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("subscriptionId", () => input.subscriptionId, "{subscriptionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_ChatCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/conversations");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_uI]: [, input[_uI]],
        [_uG]: [() => input.userGroups !== void 0, () => input[_uG] || []],
        [_cI]: [, input[_cI]],
        [_pMI]: [, input[_pMI]],
        [_cT]: [, input[_cT] ?? generateIdempotencyToken()],
    });
    let body;
    if (input.inputStream !== undefined) {
        body = se_ChatInputStream(input.inputStream, context);
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_ChatSyncCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/conversations");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_s]: [, ""],
        [_uI]: [, input[_uI]],
        [_uG]: [() => input.userGroups !== void 0, () => input[_uG] || []],
    });
    let body;
    body = JSON.stringify(take(input, {
        actionExecution: (_) => se_ActionExecution(_, context),
        attachments: (_) => se_AttachmentsInput(_, context),
        attributeFilter: (_) => se_AttributeFilter(_, context),
        authChallengeResponse: (_) => _json(_),
        chatMode: [],
        chatModeConfiguration: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        conversationId: [],
        parentMessageId: [],
        userMessage: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_CheckDocumentAccessCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/index/{indexId}/users/{userId}/documents/{documentId}/check-document-access");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    b.p("userId", () => input.userId, "{userId}", false);
    b.p("documentId", () => input.documentId, "{documentId}", false);
    const query = map({
        [_dSI]: [, input[_dSI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreateAnonymousWebExperienceUrlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/experiences/{webExperienceId}/anonymous-url");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("webExperienceId", () => input.webExperienceId, "{webExperienceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        sessionDurationInMinutes: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications");
    let body;
    body = JSON.stringify(take(input, {
        attachmentsConfiguration: (_) => _json(_),
        clientIdsForOIDC: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        displayName: [],
        encryptionConfiguration: (_) => _json(_),
        iamIdentityProviderArn: [],
        identityCenterInstanceArn: [],
        identityType: [],
        personalizationConfiguration: (_) => _json(_),
        qAppsConfiguration: (_) => _json(_),
        quickSightConfiguration: (_) => _json(_),
        roleArn: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateChatResponseConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/chatresponseconfigurations");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        displayName: [],
        responseConfigurations: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDataAccessorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/dataaccessors");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        actionConfigurations: (_) => se_ActionConfigurationList(_, context),
        authenticationDetail: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        displayName: [],
        principal: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/indices/{indexId}/datasources");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        configuration: (_) => se_DataSourceConfiguration(_, context),
        description: [],
        displayName: [],
        documentEnrichmentConfiguration: (_) => se_DocumentEnrichmentConfiguration(_, context),
        mediaExtractionConfiguration: (_) => _json(_),
        roleArn: [],
        syncSchedule: [],
        tags: (_) => _json(_),
        vpcConfiguration: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateIndexCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/indices");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        capacityConfiguration: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        displayName: [],
        tags: (_) => _json(_),
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePluginCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/plugins");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        authConfiguration: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        customPluginConfiguration: (_) => _json(_),
        displayName: [],
        serverUrl: [],
        tags: (_) => _json(_),
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRetrieverCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/retrievers");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        configuration: (_) => _json(_),
        displayName: [],
        roleArn: [],
        tags: (_) => _json(_),
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSubscriptionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/subscriptions");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        principal: (_) => _json(_),
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/users");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        userAliases: (_) => _json(_),
        userId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateWebExperienceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/experiences");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        browserExtensionConfiguration: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        customizationConfiguration: (_) => _json(_),
        identityProviderConfiguration: (_) => _json(_),
        origins: (_) => _json(_),
        roleArn: [],
        samplePromptsControlMode: [],
        subtitle: [],
        tags: (_) => _json(_),
        title: [],
        welcomeMessage: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAttachmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/conversations/{conversationId}/attachments/{attachmentId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("conversationId", () => input.conversationId, "{conversationId}", false);
    b.p("attachmentId", () => input.attachmentId, "{attachmentId}", false);
    const query = map({
        [_uI]: [, input[_uI]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteChatControlsConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/chatcontrols");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteChatResponseConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/chatresponseconfigurations/{chatResponseConfigurationId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("chatResponseConfigurationId", () => input.chatResponseConfigurationId, "{chatResponseConfigurationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteConversationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/conversations/{conversationId}");
    b.p("conversationId", () => input.conversationId, "{conversationId}", false);
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_uI]: [, input[_uI]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteDataAccessorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/dataaccessors/{dataAccessorId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("dataAccessorId", () => input.dataAccessorId, "{dataAccessorId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/indices/{indexId}/groups/{groupName}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    b.p("groupName", () => input.groupName, "{groupName}", false);
    const query = map({
        [_dSI]: [, input[_dSI]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteIndexCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/indices/{indexId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePluginCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/plugins/{pluginId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("pluginId", () => input.pluginId, "{pluginId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRetrieverCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/retrievers/{retrieverId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("retrieverId", () => input.retrieverId, "{retrieverId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/users/{userId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("userId", () => input.userId, "{userId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteWebExperienceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/experiences/{webExperienceId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("webExperienceId", () => input.webExperienceId, "{webExperienceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociatePermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/policy/{statementId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("statementId", () => input.statementId, "{statementId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetChatControlsConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/chatcontrols");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetChatResponseConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/chatresponseconfigurations/{chatResponseConfigurationId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("chatResponseConfigurationId", () => input.chatResponseConfigurationId, "{chatResponseConfigurationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDataAccessorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/dataaccessors/{dataAccessorId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("dataAccessorId", () => input.dataAccessorId, "{dataAccessorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/indices/{indexId}/groups/{groupName}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    b.p("groupName", () => input.groupName, "{groupName}", false);
    const query = map({
        [_dSI]: [, input[_dSI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetIndexCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/indices/{indexId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMediaCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/conversations/{conversationId}/messages/{messageId}/media/{mediaId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("conversationId", () => input.conversationId, "{conversationId}", false);
    b.p("messageId", () => input.messageId, "{messageId}", false);
    b.p("mediaId", () => input.mediaId, "{mediaId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPluginCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/plugins/{pluginId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("pluginId", () => input.pluginId, "{pluginId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/policy");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRetrieverCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/retrievers/{retrieverId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("retrieverId", () => input.retrieverId, "{retrieverId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/users/{userId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("userId", () => input.userId, "{userId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetWebExperienceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/experiences/{webExperienceId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("webExperienceId", () => input.webExperienceId, "{webExperienceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListApplicationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAttachmentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/attachments");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_cI]: [, input[_cI]],
        [_uI]: [, input[_uI]],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListChatResponseConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/chatresponseconfigurations");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListConversationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/conversations");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_uI]: [, input[_uI]],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDataAccessorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/dataaccessors");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDataSourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/indices/{indexId}/datasources");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDataSourceSyncJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}/syncjobs");
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_sT]: [() => input.startTime !== void 0, () => __serializeDateTime(input[_sT]).toString()],
        [_eT]: [() => input.endTime !== void 0, () => __serializeDateTime(input[_eT]).toString()],
        [_sS]: [, input[_sF]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDocumentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/index/{indexId}/documents");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    const query = map({
        [_dSIa]: [() => input.dataSourceIds !== void 0, () => input[_dSIa] || []],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/indices/{indexId}/groups");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    const query = map({
        [_uET]: [
            __expectNonNull(input.updatedEarlierThan, `updatedEarlierThan`) != null,
            () => __serializeDateTime(input[_uET]).toString(),
        ],
        [_dSI]: [, input[_dSI]],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListIndicesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/indices");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMessagesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/conversations/{conversationId}");
    b.p("conversationId", () => input.conversationId, "{conversationId}", false);
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_uI]: [, input[_uI]],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPluginActionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/plugins/{pluginId}/actions");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("pluginId", () => input.pluginId, "{pluginId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPluginsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/plugins");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPluginTypeActionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/pluginTypes/{pluginType}/actions");
    b.p("pluginType", () => input.pluginType, "{pluginType}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPluginTypeMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/pluginTypeMetadata");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRetrieversCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/retrievers");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSubscriptionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/subscriptions");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/tags/{resourceARN}");
    b.p("resourceARN", () => input.resourceARN, "{resourceARN}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListWebExperiencesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/experiences");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutFeedbackCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/conversations/{conversationId}/messages/{messageId}/feedback");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("conversationId", () => input.conversationId, "{conversationId}", false);
    b.p("messageId", () => input.messageId, "{messageId}", false);
    const query = map({
        [_uI]: [, input[_uI]],
    });
    let body;
    body = JSON.stringify(take(input, {
        messageCopiedAt: (_) => _.getTime() / 1_000,
        messageUsefulness: (_) => se_MessageUsefulnessFeedback(_, context),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/indices/{indexId}/groups");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    let body;
    body = JSON.stringify(take(input, {
        dataSourceId: [],
        groupMembers: (_) => _json(_),
        groupName: [],
        roleArn: [],
        type: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_SearchRelevantContentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/relevant-content");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        attributeFilter: (_) => se_AttributeFilter(_, context),
        contentSource: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        queryText: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartDataSourceSyncJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}/startsync");
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopDataSourceSyncJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}/stopsync");
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/tags/{resourceARN}");
    b.p("resourceARN", () => input.resourceARN, "{resourceARN}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/tags/{resourceARN}");
    b.p("resourceARN", () => input.resourceARN, "{resourceARN}", false);
    const query = map({
        [_tK]: [__expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        attachmentsConfiguration: (_) => _json(_),
        autoSubscriptionConfiguration: (_) => _json(_),
        description: [],
        displayName: [],
        identityCenterInstanceArn: [],
        personalizationConfiguration: (_) => _json(_),
        qAppsConfiguration: (_) => _json(_),
        roleArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateChatControlsConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/chatcontrols");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        blockedPhrasesConfigurationUpdate: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        creatorModeConfiguration: (_) => _json(_),
        hallucinationReductionConfiguration: (_) => _json(_),
        orchestrationConfiguration: (_) => _json(_),
        responseScope: [],
        topicConfigurationsToCreateOrUpdate: (_) => _json(_),
        topicConfigurationsToDelete: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateChatResponseConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/chatresponseconfigurations/{chatResponseConfigurationId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("chatResponseConfigurationId", () => input.chatResponseConfigurationId, "{chatResponseConfigurationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        displayName: [],
        responseConfigurations: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDataAccessorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/dataaccessors/{dataAccessorId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("dataAccessorId", () => input.dataAccessorId, "{dataAccessorId}", false);
    let body;
    body = JSON.stringify(take(input, {
        actionConfigurations: (_) => se_ActionConfigurationList(_, context),
        authenticationDetail: (_) => _json(_),
        displayName: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    b.p("dataSourceId", () => input.dataSourceId, "{dataSourceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        configuration: (_) => se_DataSourceConfiguration(_, context),
        description: [],
        displayName: [],
        documentEnrichmentConfiguration: (_) => se_DocumentEnrichmentConfiguration(_, context),
        mediaExtractionConfiguration: (_) => _json(_),
        roleArn: [],
        syncSchedule: [],
        vpcConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateIndexCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/indices/{indexId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("indexId", () => input.indexId, "{indexId}", false);
    let body;
    body = JSON.stringify(take(input, {
        capacityConfiguration: (_) => _json(_),
        description: [],
        displayName: [],
        documentAttributeConfigurations: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdatePluginCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/plugins/{pluginId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("pluginId", () => input.pluginId, "{pluginId}", false);
    let body;
    body = JSON.stringify(take(input, {
        authConfiguration: (_) => _json(_),
        customPluginConfiguration: (_) => _json(_),
        displayName: [],
        serverUrl: [],
        state: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateRetrieverCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/retrievers/{retrieverId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("retrieverId", () => input.retrieverId, "{retrieverId}", false);
    let body;
    body = JSON.stringify(take(input, {
        configuration: (_) => _json(_),
        displayName: [],
        roleArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateSubscriptionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/subscriptions/{subscriptionId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("subscriptionId", () => input.subscriptionId, "{subscriptionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        type: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/users/{userId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("userId", () => input.userId, "{userId}", false);
    let body;
    body = JSON.stringify(take(input, {
        userAliasesToDelete: (_) => _json(_),
        userAliasesToUpdate: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateWebExperienceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/experiences/{webExperienceId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("webExperienceId", () => input.webExperienceId, "{webExperienceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        authenticationConfiguration: (_) => _json(_),
        browserExtensionConfiguration: (_) => _json(_),
        customizationConfiguration: (_) => _json(_),
        identityProviderConfiguration: (_) => _json(_),
        origins: (_) => _json(_),
        roleArn: [],
        samplePromptsControlMode: [],
        subtitle: [],
        title: [],
        welcomeMessage: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_AssociatePermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        statement: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchDeleteDocumentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        failedDocuments: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchPutDocumentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        failedDocuments: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CancelSubscriptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        currentSubscription: _json,
        nextSubscription: _json,
        subscriptionArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ChatCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = output.body;
    contents.outputStream = de_ChatOutputStream(data, context);
    return contents;
};
export const de_ChatSyncCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        actionReview: (_) => de_ActionReview(_, context),
        authChallengeRequest: _json,
        conversationId: __expectString,
        failedAttachments: _json,
        sourceAttributions: (_) => de_SourceAttributions(_, context),
        systemMessage: __expectString,
        systemMessageId: __expectString,
        userMessageId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CheckDocumentAccessCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        documentAcl: _json,
        hasAccess: __expectBoolean,
        userAliases: _json,
        userGroups: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAnonymousWebExperienceUrlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        anonymousUrl: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationArn: __expectString,
        applicationId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateChatResponseConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        chatResponseConfigurationArn: __expectString,
        chatResponseConfigurationId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDataAccessorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataAccessorArn: __expectString,
        dataAccessorId: __expectString,
        idcApplicationArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSourceArn: __expectString,
        dataSourceId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateIndexCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        indexArn: __expectString,
        indexId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePluginCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        buildStatus: __expectString,
        pluginArn: __expectString,
        pluginId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRetrieverCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        retrieverArn: __expectString,
        retrieverId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSubscriptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        currentSubscription: _json,
        nextSubscription: _json,
        subscriptionArn: __expectString,
        subscriptionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateWebExperienceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        webExperienceArn: __expectString,
        webExperienceId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAttachmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteChatControlsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteChatResponseConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteConversationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteDataAccessorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteIndexCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeletePluginCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRetrieverCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteWebExperienceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociatePermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationArn: __expectString,
        applicationId: __expectString,
        attachmentsConfiguration: _json,
        autoSubscriptionConfiguration: _json,
        clientIdsForOIDC: _json,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        displayName: __expectString,
        encryptionConfiguration: _json,
        error: _json,
        iamIdentityProviderArn: __expectString,
        identityCenterApplicationArn: __expectString,
        identityType: __expectString,
        personalizationConfiguration: _json,
        qAppsConfiguration: _json,
        quickSightConfiguration: _json,
        roleArn: __expectString,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetChatControlsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        blockedPhrases: _json,
        creatorModeConfiguration: _json,
        hallucinationReductionConfiguration: _json,
        nextToken: __expectString,
        orchestrationConfiguration: _json,
        responseScope: __expectString,
        topicConfigurations: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetChatResponseConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        chatResponseConfigurationArn: __expectString,
        chatResponseConfigurationId: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        displayName: __expectString,
        inUseConfiguration: (_) => de_ChatResponseConfigurationDetail(_, context),
        lastUpdateConfiguration: (_) => de_ChatResponseConfigurationDetail(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDataAccessorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        actionConfigurations: (_) => de_ActionConfigurationList(_, context),
        applicationId: __expectString,
        authenticationDetail: _json,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dataAccessorArn: __expectString,
        dataAccessorId: __expectString,
        displayName: __expectString,
        idcApplicationArn: __expectString,
        principal: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationId: __expectString,
        configuration: (_) => de_DataSourceConfiguration(_, context),
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dataSourceArn: __expectString,
        dataSourceId: __expectString,
        description: __expectString,
        displayName: __expectString,
        documentEnrichmentConfiguration: (_) => de_DocumentEnrichmentConfiguration(_, context),
        error: _json,
        indexId: __expectString,
        mediaExtractionConfiguration: _json,
        roleArn: __expectString,
        status: __expectString,
        syncSchedule: __expectString,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        vpcConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        status: (_) => de_GroupStatusDetail(_, context),
        statusHistory: (_) => de_GroupStatusDetails(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetIndexCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationId: __expectString,
        capacityConfiguration: _json,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        displayName: __expectString,
        documentAttributeConfigurations: _json,
        error: _json,
        indexArn: __expectString,
        indexId: __expectString,
        indexStatistics: _json,
        status: __expectString,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMediaCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        mediaBytes: context.base64Decoder,
        mediaMimeType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPluginCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationId: __expectString,
        authConfiguration: (_) => _json(__expectUnion(_)),
        buildStatus: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        customPluginConfiguration: _json,
        displayName: __expectString,
        pluginArn: __expectString,
        pluginId: __expectString,
        serverUrl: __expectString,
        state: __expectString,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        policy: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRetrieverCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationId: __expectString,
        configuration: (_) => _json(__expectUnion(_)),
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        displayName: __expectString,
        retrieverArn: __expectString,
        retrieverId: __expectString,
        roleArn: __expectString,
        status: __expectString,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        userAliases: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWebExperienceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationId: __expectString,
        authenticationConfiguration: (_) => _json(__expectUnion(_)),
        browserExtensionConfiguration: _json,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        customizationConfiguration: _json,
        defaultEndpoint: __expectString,
        error: _json,
        identityProviderConfiguration: (_) => _json(__expectUnion(_)),
        origins: _json,
        roleArn: __expectString,
        samplePromptsControlMode: __expectString,
        status: __expectString,
        subtitle: __expectString,
        title: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        webExperienceArn: __expectString,
        webExperienceId: __expectString,
        welcomeMessage: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListApplicationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applications: (_) => de_Applications(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAttachmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        attachments: (_) => de_AttachmentList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListChatResponseConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        chatResponseConfigurations: (_) => de_ChatResponseConfigurations(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListConversationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        conversations: (_) => de_Conversations(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDataAccessorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataAccessors: (_) => de_DataAccessors(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDataSourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataSources: (_) => de_DataSources(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDataSourceSyncJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        history: (_) => de_DataSourceSyncJobs(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDocumentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        documentDetailList: (_) => de_DocumentDetailList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListIndicesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        indices: (_) => de_Indices(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMessagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        messages: (_) => de_Messages(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPluginActionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPluginsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        plugins: (_) => de_Plugins(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPluginTypeActionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPluginTypeMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRetrieversCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        retrievers: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSubscriptionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        subscriptions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWebExperiencesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        webExperiences: (_) => de_WebExperiences(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutFeedbackCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_PutGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_SearchRelevantContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        relevantContent: (_) => de_RelevantContentList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartDataSourceSyncJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        executionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopDataSourceSyncJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateChatControlsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateChatResponseConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDataAccessorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateIndexCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdatePluginCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateRetrieverCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateSubscriptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        currentSubscription: _json,
        nextSubscription: _json,
        subscriptionArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        userAliasesAdded: _json,
        userAliasesDeleted: _json,
        userAliasesUpdated: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateWebExperienceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.qbusiness#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.qbusiness#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.qbusiness#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.qbusiness#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.qbusiness#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.qbusiness#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.qbusiness#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ExternalResourceException":
        case "com.amazonaws.qbusiness#ExternalResourceException":
            throw await de_ExternalResourceExceptionRes(parsedOutput, context);
        case "LicenseNotFoundException":
        case "com.amazonaws.qbusiness#LicenseNotFoundException":
            throw await de_LicenseNotFoundExceptionRes(parsedOutput, context);
        case "MediaTooLargeException":
        case "com.amazonaws.qbusiness#MediaTooLargeException":
            throw await de_MediaTooLargeExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ExternalResourceExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ExternalResourceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_LicenseNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new LicenseNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_MediaTooLargeExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new MediaTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        fields: _json,
        message: __expectString,
        reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_ChatInputStream = (input, context) => {
    const eventMarshallingVisitor = (event) => ChatInputStream.visit(event, {
        configurationEvent: (value) => se_ConfigurationEvent_event(value, context),
        textEvent: (value) => se_TextInputEvent_event(value, context),
        attachmentEvent: (value) => se_AttachmentInputEvent_event(value, context),
        actionExecutionEvent: (value) => se_ActionExecutionEvent_event(value, context),
        endOfInputEvent: (value) => se_EndOfInputEvent_event(value, context),
        authChallengeResponseEvent: (value) => se_AuthChallengeResponseEvent_event(value, context),
        _: (value) => value,
    });
    return context.eventStreamMarshaller.serialize(input, eventMarshallingVisitor);
};
const se_ActionExecutionEvent_event = (input, context) => {
    const headers = {
        ":event-type": { type: "string", value: "actionExecutionEvent" },
        ":message-type": { type: "string", value: "event" },
        ":content-type": { type: "string", value: "application/json" },
    };
    let body = new Uint8Array();
    body = se_ActionExecutionEvent(input, context);
    body = context.utf8Decoder(JSON.stringify(body));
    return { headers, body };
};
const se_AttachmentInputEvent_event = (input, context) => {
    const headers = {
        ":event-type": { type: "string", value: "attachmentEvent" },
        ":message-type": { type: "string", value: "event" },
        ":content-type": { type: "string", value: "application/json" },
    };
    let body = new Uint8Array();
    body = se_AttachmentInputEvent(input, context);
    body = context.utf8Decoder(JSON.stringify(body));
    return { headers, body };
};
const se_AuthChallengeResponseEvent_event = (input, context) => {
    const headers = {
        ":event-type": { type: "string", value: "authChallengeResponseEvent" },
        ":message-type": { type: "string", value: "event" },
        ":content-type": { type: "string", value: "application/json" },
    };
    let body = new Uint8Array();
    body = _json(input);
    body = context.utf8Decoder(JSON.stringify(body));
    return { headers, body };
};
const se_ConfigurationEvent_event = (input, context) => {
    const headers = {
        ":event-type": { type: "string", value: "configurationEvent" },
        ":message-type": { type: "string", value: "event" },
        ":content-type": { type: "string", value: "application/json" },
    };
    let body = new Uint8Array();
    body = se_ConfigurationEvent(input, context);
    body = context.utf8Decoder(JSON.stringify(body));
    return { headers, body };
};
const se_EndOfInputEvent_event = (input, context) => {
    const headers = {
        ":event-type": { type: "string", value: "endOfInputEvent" },
        ":message-type": { type: "string", value: "event" },
        ":content-type": { type: "string", value: "application/json" },
    };
    let body = new Uint8Array();
    body = _json(input);
    body = context.utf8Decoder(JSON.stringify(body));
    return { headers, body };
};
const se_TextInputEvent_event = (input, context) => {
    const headers = {
        ":event-type": { type: "string", value: "textEvent" },
        ":message-type": { type: "string", value: "event" },
        ":content-type": { type: "string", value: "application/json" },
    };
    let body = new Uint8Array();
    body = _json(input);
    body = context.utf8Decoder(JSON.stringify(body));
    return { headers, body };
};
const de_ChatOutputStream = (output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["textEvent"] != null) {
            return {
                textEvent: await de_TextOutputEvent_event(event["textEvent"], context),
            };
        }
        if (event["metadataEvent"] != null) {
            return {
                metadataEvent: await de_MetadataEvent_event(event["metadataEvent"], context),
            };
        }
        if (event["actionReviewEvent"] != null) {
            return {
                actionReviewEvent: await de_ActionReviewEvent_event(event["actionReviewEvent"], context),
            };
        }
        if (event["failedAttachmentEvent"] != null) {
            return {
                failedAttachmentEvent: await de_FailedAttachmentEvent_event(event["failedAttachmentEvent"], context),
            };
        }
        if (event["authChallengeRequestEvent"] != null) {
            return {
                authChallengeRequestEvent: await de_AuthChallengeRequestEvent_event(event["authChallengeRequestEvent"], context),
            };
        }
        return { $unknown: event };
    });
};
const de_ActionReviewEvent_event = async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    Object.assign(contents, de_ActionReviewEvent(data, context));
    return contents;
};
const de_AuthChallengeRequestEvent_event = async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    Object.assign(contents, _json(data));
    return contents;
};
const de_FailedAttachmentEvent_event = async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    Object.assign(contents, _json(data));
    return contents;
};
const de_MetadataEvent_event = async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    Object.assign(contents, de_MetadataEvent(data, context));
    return contents;
};
const de_TextOutputEvent_event = async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    Object.assign(contents, _json(data));
    return contents;
};
const se_ActionConfiguration = (input, context) => {
    return take(input, {
        action: [],
        filterConfiguration: (_) => se_ActionFilterConfiguration(_, context),
    });
};
const se_ActionConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ActionConfiguration(entry, context);
    });
};
const se_ActionExecution = (input, context) => {
    return take(input, {
        payload: (_) => se_ActionExecutionPayload(_, context),
        payloadFieldNameSeparator: [],
        pluginId: [],
    });
};
const se_ActionExecutionEvent = (input, context) => {
    return take(input, {
        payload: (_) => se_ActionExecutionPayload(_, context),
        payloadFieldNameSeparator: [],
        pluginId: [],
    });
};
const se_ActionExecutionPayload = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ActionExecutionPayloadField(value, context);
        return acc;
    }, {});
};
const se_ActionExecutionPayloadField = (input, context) => {
    return take(input, {
        value: (_) => se_ActionPayloadFieldValue(_, context),
    });
};
const se_ActionFilterConfiguration = (input, context) => {
    return take(input, {
        documentAttributeFilter: (_) => se_AttributeFilter(_, context),
    });
};
const se_ActionPayloadFieldValue = (input, context) => {
    return input;
};
const se_AttachmentInput = (input, context) => {
    return take(input, {
        copyFrom: _json,
        data: context.base64Encoder,
        name: [],
    });
};
const se_AttachmentInputEvent = (input, context) => {
    return take(input, {
        attachment: (_) => se_AttachmentInput(_, context),
    });
};
const se_AttachmentsInput = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AttachmentInput(entry, context);
    });
};
const se_AttributeFilter = (input, context) => {
    return take(input, {
        andAllFilters: (_) => se_AttributeFilters(_, context),
        containsAll: (_) => se_DocumentAttribute(_, context),
        containsAny: (_) => se_DocumentAttribute(_, context),
        equalsTo: (_) => se_DocumentAttribute(_, context),
        greaterThan: (_) => se_DocumentAttribute(_, context),
        greaterThanOrEquals: (_) => se_DocumentAttribute(_, context),
        lessThan: (_) => se_DocumentAttribute(_, context),
        lessThanOrEquals: (_) => se_DocumentAttribute(_, context),
        notFilter: (_) => se_AttributeFilter(_, context),
        orAllFilters: (_) => se_AttributeFilters(_, context),
    });
};
const se_AttributeFilters = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AttributeFilter(entry, context);
    });
};
const se_ConfigurationEvent = (input, context) => {
    return take(input, {
        attributeFilter: (_) => se_AttributeFilter(_, context),
        chatMode: [],
        chatModeConfiguration: _json,
    });
};
const se_DataSourceConfiguration = (input, context) => {
    return input;
};
const se_Document = (input, context) => {
    return take(input, {
        accessConfiguration: _json,
        attributes: (_) => se_DocumentAttributes(_, context),
        content: (_) => se_DocumentContent(_, context),
        contentType: [],
        documentEnrichmentConfiguration: (_) => se_DocumentEnrichmentConfiguration(_, context),
        id: [],
        mediaExtractionConfiguration: _json,
        title: [],
    });
};
const se_DocumentAttribute = (input, context) => {
    return take(input, {
        name: [],
        value: (_) => se_DocumentAttributeValue(_, context),
    });
};
const se_DocumentAttributeCondition = (input, context) => {
    return take(input, {
        key: [],
        operator: [],
        value: (_) => se_DocumentAttributeValue(_, context),
    });
};
const se_DocumentAttributes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DocumentAttribute(entry, context);
    });
};
const se_DocumentAttributeTarget = (input, context) => {
    return take(input, {
        attributeValueOperator: [],
        key: [],
        value: (_) => se_DocumentAttributeValue(_, context),
    });
};
const se_DocumentAttributeValue = (input, context) => {
    return DocumentAttributeValue.visit(input, {
        dateValue: (value) => ({ dateValue: value.getTime() / 1_000 }),
        longValue: (value) => ({ longValue: value }),
        stringListValue: (value) => ({ stringListValue: _json(value) }),
        stringValue: (value) => ({ stringValue: value }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_DocumentContent = (input, context) => {
    return DocumentContent.visit(input, {
        blob: (value) => ({ blob: context.base64Encoder(value) }),
        s3: (value) => ({ s3: _json(value) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_DocumentEnrichmentConfiguration = (input, context) => {
    return take(input, {
        inlineConfigurations: (_) => se_InlineDocumentEnrichmentConfigurations(_, context),
        postExtractionHookConfiguration: (_) => se_HookConfiguration(_, context),
        preExtractionHookConfiguration: (_) => se_HookConfiguration(_, context),
    });
};
const se_Documents = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Document(entry, context);
    });
};
const se_HookConfiguration = (input, context) => {
    return take(input, {
        invocationCondition: (_) => se_DocumentAttributeCondition(_, context),
        lambdaArn: [],
        roleArn: [],
        s3BucketName: [],
    });
};
const se_InlineDocumentEnrichmentConfiguration = (input, context) => {
    return take(input, {
        condition: (_) => se_DocumentAttributeCondition(_, context),
        documentContentOperator: [],
        target: (_) => se_DocumentAttributeTarget(_, context),
    });
};
const se_InlineDocumentEnrichmentConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InlineDocumentEnrichmentConfiguration(entry, context);
    });
};
const se_MessageUsefulnessFeedback = (input, context) => {
    return take(input, {
        comment: [],
        reason: [],
        submittedAt: (_) => _.getTime() / 1_000,
        usefulness: [],
    });
};
const de_ActionConfiguration = (output, context) => {
    return take(output, {
        action: __expectString,
        filterConfiguration: (_) => de_ActionFilterConfiguration(_, context),
    });
};
const de_ActionConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActionConfiguration(entry, context);
    });
    return retVal;
};
const de_ActionExecution = (output, context) => {
    return take(output, {
        payload: (_) => de_ActionExecutionPayload(_, context),
        payloadFieldNameSeparator: __expectString,
        pluginId: __expectString,
    });
};
const de_ActionExecutionPayload = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ActionExecutionPayloadField(value, context);
        return acc;
    }, {});
};
const de_ActionExecutionPayloadField = (output, context) => {
    return take(output, {
        value: (_) => de_ActionPayloadFieldValue(_, context),
    });
};
const de_ActionFilterConfiguration = (output, context) => {
    return take(output, {
        documentAttributeFilter: (_) => de_AttributeFilter(_, context),
    });
};
const de_ActionPayloadFieldValue = (output, context) => {
    return output;
};
const de_ActionReview = (output, context) => {
    return take(output, {
        payload: (_) => de_ActionReviewPayload(_, context),
        payloadFieldNameSeparator: __expectString,
        pluginId: __expectString,
        pluginType: __expectString,
    });
};
const de_ActionReviewEvent = (output, context) => {
    return take(output, {
        conversationId: __expectString,
        payload: (_) => de_ActionReviewPayload(_, context),
        payloadFieldNameSeparator: __expectString,
        pluginId: __expectString,
        pluginType: __expectString,
        systemMessageId: __expectString,
        userMessageId: __expectString,
    });
};
const de_ActionReviewPayload = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ActionReviewPayloadField(value, context);
        return acc;
    }, {});
};
const de_ActionReviewPayloadField = (output, context) => {
    return take(output, {
        allowedFormat: __expectString,
        allowedValues: (_) => de_ActionReviewPayloadFieldAllowedValues(_, context),
        arrayItemJsonSchema: (_) => de_ActionReviewPayloadFieldArrayItemJsonSchema(_, context),
        displayDescription: __expectString,
        displayName: __expectString,
        displayOrder: __expectInt32,
        required: __expectBoolean,
        type: __expectString,
        value: (_) => de_ActionPayloadFieldValue(_, context),
    });
};
const de_ActionReviewPayloadFieldAllowedValue = (output, context) => {
    return take(output, {
        displayValue: (_) => de_ActionPayloadFieldValue(_, context),
        value: (_) => de_ActionPayloadFieldValue(_, context),
    });
};
const de_ActionReviewPayloadFieldAllowedValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActionReviewPayloadFieldAllowedValue(entry, context);
    });
    return retVal;
};
const de_ActionReviewPayloadFieldArrayItemJsonSchema = (output, context) => {
    return output;
};
const de_Application = (output, context) => {
    return take(output, {
        applicationId: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        displayName: __expectString,
        identityType: __expectString,
        quickSightConfiguration: _json,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Applications = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Application(entry, context);
    });
    return retVal;
};
const de_Attachment = (output, context) => {
    return take(output, {
        attachmentId: __expectString,
        conversationId: __expectString,
        copyFrom: (_) => _json(__expectUnion(_)),
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        error: _json,
        fileSize: __expectInt32,
        fileType: __expectString,
        md5chksum: __expectString,
        name: __expectString,
        status: __expectString,
    });
};
const de_AttachmentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Attachment(entry, context);
    });
    return retVal;
};
const de_AttributeFilter = (output, context) => {
    return take(output, {
        andAllFilters: (_) => de_AttributeFilters(_, context),
        containsAll: (_) => de_DocumentAttribute(_, context),
        containsAny: (_) => de_DocumentAttribute(_, context),
        equalsTo: (_) => de_DocumentAttribute(_, context),
        greaterThan: (_) => de_DocumentAttribute(_, context),
        greaterThanOrEquals: (_) => de_DocumentAttribute(_, context),
        lessThan: (_) => de_DocumentAttribute(_, context),
        lessThanOrEquals: (_) => de_DocumentAttribute(_, context),
        notFilter: (_) => de_AttributeFilter(_, context),
        orAllFilters: (_) => de_AttributeFilters(_, context),
    });
};
const de_AttributeFilters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AttributeFilter(entry, context);
    });
    return retVal;
};
const de_ChatResponseConfiguration = (output, context) => {
    return take(output, {
        chatResponseConfigurationArn: __expectString,
        chatResponseConfigurationId: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        displayName: __expectString,
        responseConfigurationSummary: __expectString,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ChatResponseConfigurationDetail = (output, context) => {
    return take(output, {
        error: _json,
        responseConfigurationSummary: __expectString,
        responseConfigurations: _json,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ChatResponseConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ChatResponseConfiguration(entry, context);
    });
    return retVal;
};
const de_Conversation = (output, context) => {
    return take(output, {
        conversationId: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        title: __expectString,
    });
};
const de_Conversations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Conversation(entry, context);
    });
    return retVal;
};
const de_DataAccessor = (output, context) => {
    return take(output, {
        authenticationDetail: _json,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dataAccessorArn: __expectString,
        dataAccessorId: __expectString,
        displayName: __expectString,
        idcApplicationArn: __expectString,
        principal: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DataAccessors = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataAccessor(entry, context);
    });
    return retVal;
};
const de_DataSource = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dataSourceId: __expectString,
        displayName: __expectString,
        status: __expectString,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DataSourceConfiguration = (output, context) => {
    return output;
};
const de_DataSources = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSource(entry, context);
    });
    return retVal;
};
const de_DataSourceSyncJob = (output, context) => {
    return take(output, {
        dataSourceErrorCode: __expectString,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        error: _json,
        executionId: __expectString,
        metrics: _json,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
    });
};
const de_DataSourceSyncJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSourceSyncJob(entry, context);
    });
    return retVal;
};
const de_DocumentAttribute = (output, context) => {
    return take(output, {
        name: __expectString,
        value: (_) => de_DocumentAttributeValue(__expectUnion(_), context),
    });
};
const de_DocumentAttributeCondition = (output, context) => {
    return take(output, {
        key: __expectString,
        operator: __expectString,
        value: (_) => de_DocumentAttributeValue(__expectUnion(_), context),
    });
};
const de_DocumentAttributes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DocumentAttribute(entry, context);
    });
    return retVal;
};
const de_DocumentAttributeTarget = (output, context) => {
    return take(output, {
        attributeValueOperator: __expectString,
        key: __expectString,
        value: (_) => de_DocumentAttributeValue(__expectUnion(_), context),
    });
};
const de_DocumentAttributeValue = (output, context) => {
    if (output.dateValue != null) {
        return {
            dateValue: __expectNonNull(__parseEpochTimestamp(__expectNumber(output.dateValue))),
        };
    }
    if (__expectLong(output.longValue) !== undefined) {
        return { longValue: __expectLong(output.longValue) };
    }
    if (output.stringListValue != null) {
        return {
            stringListValue: _json(output.stringListValue),
        };
    }
    if (__expectString(output.stringValue) !== undefined) {
        return { stringValue: __expectString(output.stringValue) };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_DocumentDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DocumentDetails(entry, context);
    });
    return retVal;
};
const de_DocumentDetails = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        documentId: __expectString,
        error: _json,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DocumentEnrichmentConfiguration = (output, context) => {
    return take(output, {
        inlineConfigurations: (_) => de_InlineDocumentEnrichmentConfigurations(_, context),
        postExtractionHookConfiguration: (_) => de_HookConfiguration(_, context),
        preExtractionHookConfiguration: (_) => de_HookConfiguration(_, context),
    });
};
const de_GroupStatusDetail = (output, context) => {
    return take(output, {
        errorDetail: _json,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
    });
};
const de_GroupStatusDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GroupStatusDetail(entry, context);
    });
    return retVal;
};
const de_HookConfiguration = (output, context) => {
    return take(output, {
        invocationCondition: (_) => de_DocumentAttributeCondition(_, context),
        lambdaArn: __expectString,
        roleArn: __expectString,
        s3BucketName: __expectString,
    });
};
const de_Index = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        displayName: __expectString,
        indexId: __expectString,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Indices = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Index(entry, context);
    });
    return retVal;
};
const de_InlineDocumentEnrichmentConfiguration = (output, context) => {
    return take(output, {
        condition: (_) => de_DocumentAttributeCondition(_, context),
        documentContentOperator: __expectString,
        target: (_) => de_DocumentAttributeTarget(_, context),
    });
};
const de_InlineDocumentEnrichmentConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InlineDocumentEnrichmentConfiguration(entry, context);
    });
    return retVal;
};
const de_Message = (output, context) => {
    return take(output, {
        actionExecution: (_) => de_ActionExecution(_, context),
        actionReview: (_) => de_ActionReview(_, context),
        attachments: _json,
        body: __expectString,
        messageId: __expectString,
        sourceAttribution: (_) => de_SourceAttributions(_, context),
        time: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        type: __expectString,
    });
};
const de_Messages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Message(entry, context);
    });
    return retVal;
};
const de_MetadataEvent = (output, context) => {
    return take(output, {
        conversationId: __expectString,
        finalTextMessage: __expectString,
        sourceAttributions: (_) => de_SourceAttributions(_, context),
        systemMessageId: __expectString,
        userMessageId: __expectString,
    });
};
const de_Plugin = (output, context) => {
    return take(output, {
        buildStatus: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        displayName: __expectString,
        pluginId: __expectString,
        serverUrl: __expectString,
        state: __expectString,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Plugins = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Plugin(entry, context);
    });
    return retVal;
};
const de_RelevantContent = (output, context) => {
    return take(output, {
        content: __expectString,
        documentAttributes: (_) => de_DocumentAttributes(_, context),
        documentId: __expectString,
        documentTitle: __expectString,
        documentUri: __expectString,
        scoreAttributes: _json,
    });
};
const de_RelevantContentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RelevantContent(entry, context);
    });
    return retVal;
};
const de_SourceAttribution = (output, context) => {
    return take(output, {
        citationNumber: __expectInt32,
        snippet: __expectString,
        textMessageSegments: _json,
        title: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        url: __expectString,
    });
};
const de_SourceAttributions = (output, context) => {
    const retVal = (output || []).map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_SourceAttribution(entry, context);
    });
    return retVal;
};
const de_WebExperience = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        defaultEndpoint: __expectString,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        webExperienceId: __expectString,
    });
};
const de_WebExperiences = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WebExperience(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _cI = "conversationId";
const _cT = "clientToken";
const _dSI = "dataSourceId";
const _dSIa = "dataSourceIds";
const _eT = "endTime";
const _mR = "maxResults";
const _nT = "nextToken";
const _pMI = "parentMessageId";
const _s = "sync";
const _sF = "statusFilter";
const _sS = "syncStatus";
const _sT = "startTime";
const _tK = "tagKeys";
const _uET = "updatedEarlierThan";
const _uG = "userGroups";
const _uI = "userId";
